"""
Django settings for socket_django project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-lgjry+kjt%1sv6vdo&upo9-sl6^gs!k+w(%i!9xft#4a(ud93m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1','localhost','192.168.9.73','d291-122-176-112-241.in.ngrok.io']


# Application definition

INSTALLED_APPS = [
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'chat',
    'channel_layers',
    'frontendmethods',
    'chat_connect_db',
    'generic_consumer'
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'socket_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'chat/templates'),os.path.join(BASE_DIR, 'frontendmethods/templates'),os.path.join(BASE_DIR, 'channel_layers/templates'),os.path.join(BASE_DIR, 'chat_connect_db/templates'),os.path.join(BASE_DIR, 'generic_consumer/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = ' socket_django.wsgi.application'

ASGI_APPLICATION = 'socket_django.asgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'chat_db',
        'USER': 'chatuser',
        'PASSWORD': 'chat@123',
        'HOST': "localhost",
        #'HOST':'postgres',
        'PORT': '',

    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels.layers.InMemoryChannelLayer'
#     }
# }

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}


# def patch_broken_pipe_error():
#     """Monkey Patch BaseServer.handle_error to not write
#     a stacktrace to stderr on broken pipe.
#     http://stackoverflow.com/a/22618740/362702"""
#     import sys
#     from socketserver import BaseServer
#     from wsgiref import handlers

#     handle_error = BaseServer.handle_error
#     log_exception = handlers.BaseHandler.log_exception

#     def is_broken_pipe_error():
#         type, err, tb = sys.exc_info()
#         return repr(err) == "error(32, 'Broken pipe')"

#     def my_handle_error(self, request, client_address):
#         if not is_broken_pipe_error():
#             handle_error(self, request, client_address)

#     def my_log_exception(self, exc_info):
#         if not is_broken_pipe_error():
#             log_exception(self, exc_info)

#     BaseServer = my_handle_error
#     handlers.BaseHandler.log_exception = my_log_exception

# patch_broken_pipe_error()
import os


print(os.path.join(BASE_DIR, 'channel_layers/templates'),1111111)